{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Systematic Trader's Toolkit!","text":"<ul> <li> <p> See the Tutorial</p> <p>Take the learning-by-doing approach to get up and running in no time</p> <p> Tutorial</p> </li> <li> <p> Read the Documentation</p> <p>Dive into the details and understand the underlying architecture from A to Z</p> <p> Documentation</p> </li> </ul>"},{"location":"documentation/overview/","title":"Welcome to the Docs","text":"<ul> <li> <p> Getting Started</p> <p>Learn the different ways to install and use the Systematic Trader's Toolkit both locally and in the cloud </p> <p> Getting Started</p> </li> <li> <p> Historical Market Data</p> <p>Learn how to collect and manage historical market data with the <code>HistoricalMarketDataCollector</code> module</p> <p> Historical Market Data</p> </li> <li> <p> Ontology</p> <p>Understand which kinds of objects exist in the toolkit's infrastructure (e.g. event types, interval types, etc.) </p> <p> Ontology</p> </li> </ul>"},{"location":"documentation/getting-started/installation/","title":"Installation","text":"pip poetry <p>Before using this library in your projects, you may want to create a directory in which you perform your operations. For this tutorial, we will create and use a directory called <code>sttk-testdrive</code> and set up a dedicated virtual environment called <code>sttk-testenv</code>:</p> <p>Step 1: Create a project directory. <pre><code>mkdir sttk-testdrive\ncd sttk-testdrive\n</code></pre></p> <p>Step 2: Create a virtual environment.  <pre><code>python3 -m venv ./sttk-testenv\n</code></pre></p> <p>Step 3: Activate the virtual environment.</p> MacOS/LinuxWindows <pre><code>source sttk-testenv/bin/activate\n</code></pre> <pre><code>sttk-testenv\\Scripts\\activate\n</code></pre> <p>Step 4: Install the <code>sttk</code> library via the <code>pip</code> package installer: <pre><code>pip install sttk\n</code></pre></p> <p>Under Construction!</p> <p>This section is under construction! STTK is still a work in progress, but don\u2019t worry\u2014a pre-release version is just around the corner. Grab a coffee and hang tight!</p>"},{"location":"documentation/getting-started/jupyter-notebook/","title":"Jupyter Notebook","text":"<p>It is convenient to use a Jupyter Notebook for conducting quantitative research with the Systematic Trading Toolkit. To do that, you need to have installed the <code>notebook</code> package in your virtual environment.</p> <p>Step 1: Install <code>notebook</code> package.</p>  pip poetry <pre><code>pip install notebook\n</code></pre> <pre><code>poetry add notebook\n</code></pre> <p>Step 2: Create a new folder for saving your Jupyter Notebook(s): <pre><code>mkdir notebooks\n</code></pre></p> <p>Step 3: Then switch your current working directory to the <code>notebooks/</code> directory and start the Jupyter Notebook server: <pre><code>cd notebooks\njupyter notebook --port=8888\n</code></pre> Now, a Jupyter Notebook server will run at <code>localhost:8888</code>, the port number should be changed if this port is already in use.</p> <p>Step 4: Open up a new Jupyter Notebook and select <code>Python 3 (ipykernel)</code> if asked to select a kernel. </p> Create new Notebook by clicking on `File&gt;New&gt;Notebook`"},{"location":"documentation/historical-market-data/module-overview/","title":"Module Overview","text":"<p>The <code>HistoricalMarketDataCollector</code> module is designed to fetch historical market data from  various sources, process it into pandas DataFrames, and then store the data in user-specified formats.  It ensures flexible configuration of the historical market data retrieval process  through a dictionary-based initialization, as per the example below:</p> <pre><code>config = {\n    \"source\": \"yfinance\",\n    \"storage_option\": \"csv\",\n    \"storage_dir\": \"../sttk-data/csv/\",\n    \"list_of_tickers\": [\"AAPL\", \"MSFT\"],\n    \"start_date\": \"2023-01-01\",\n    \"end_date\": \"2023-03-01\",\n    \"interval\": {\"day\": 1},\n}\n\ncollector = HistoricalMarketDataCollector(config)\ncollector.get_data()\n</code></pre> <p>The following table summarizes the possible parameters that can be ingested at the instantiation of the <code>HistoricalDataCollector</code> class:</p> Parameter Type Description <code>source</code> <code>str</code> Data source.  See Supported Data Sources <code>storage_option</code> <code>str</code> Storage format.  See Supported Storage Options <code>storage_dir</code> <code>str</code> Directory path where data will be saved. Example: <code>\"../sttk-data/csv\"</code> <code>list_of_tickers</code> <code>List[str]</code> List of ticker symbols for which data should be collected. Example: <code>[\"AAPL\", \"MSFT\"]</code> <code>start_date</code> <code>str</code> or <code>datetime</code> Starting date for data retrieval. Example: <code>2023-01-01</code> or <code>datetime.datetime(2023, 1, 1)</code> <code>end_date</code> <code>str</code> or <code>datetime</code> Optional (!) ending date. Note: Defaults to the current date if not provided. <code>interval</code> <code>Dict[str, int]</code> Dictionary specifying the interval type and duration.  See Supported Interval Types  Example: <code>{\"hour\": 1}</code>"},{"location":"documentation/historical-market-data/supported-data-sources/","title":"Supported Data Sources","text":"<p>Under Construction!</p> <p>This section is under construction! STTK is still a work in progress, but don\u2019t worry\u2014a pre-release version is just around the corner. Grab a coffee and hang tight!</p>"},{"location":"documentation/historical-market-data/supported-storage-options/","title":"Supported Storage Options","text":"<p>Under Construction!</p> <p>This section is under construction! STTK is still a work in progress, but don\u2019t worry\u2014a pre-release version is just around the corner. Grab a coffee and hang tight!</p>"},{"location":"documentation/ontology/event-types/","title":"Event Types","text":"<p>Under Construction!</p> <p>This section is under construction! STTK is still a work in progress, but don\u2019t worry\u2014a pre-release version is just around the corner. Grab a coffee and hang tight!</p>"},{"location":"documentation/ontology/non-event-types/","title":"Non-Event Types","text":"<p>Under Construction!</p> <p>This section is under construction! STTK is still a work in progress, but don\u2019t worry\u2014a pre-release version is just around the corner. Grab a coffee and hang tight!</p>"},{"location":"documentation/ontology/overview/","title":"Overview","text":"<p>Under Construction!</p> <p>This section is under construction! STTK is still a work in progress, but don\u2019t worry\u2014a pre-release version is just around the corner. Grab a coffee and hang tight!</p>"},{"location":"tutorial/overview/","title":"Welcome to the Tutorial","text":"<ul> <li> <p> Quickstart Guide</p> <p>Get up and running in under 10 minutes while discovering the most important features</p> <p> Quickstart Guide</p> </li> </ul> <ul> <li> <p> Read the Documentation</p> <p>Dive into the details and understand the underlying architecture from A to Z</p> <p> Documentation</p> </li> </ul>"},{"location":"tutorial/quickstart-guide/","title":"Quickstart Guide","text":"<p>Step 1: Install <code>sttk</code> and the <code>notebook</code> package.</p>  pip poetry <pre><code>pip install sttk notebook\n</code></pre> <pre><code>poetry add sttk notebook\n</code></pre> <p>Step 2: Start a Jupyter Notebook Server and open a new Jupyter Notebook. </p> <pre><code>jupyter notebook --port=8888 # change portnumber if port is already in use\n</code></pre>"}]}